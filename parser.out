Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> line
Rule 2     code -> comment
Rule 3     code -> NEWLINE
Rule 4     code -> ERROR_CODE
Rule 5     line -> CODE NEWLINE
Rule 6     line -> CODE
Rule 7     comment -> INLINE_COMMENT NEWLINE
Rule 8     comment -> MULTILINE_COMMENT NEWLINE
Rule 9     comment -> INLINE_COMMENT
Rule 10    comment -> MULTILINE_COMMENT

Terminals, with rules where they appear

CODE                 : 5 6
ERROR_CODE           : 4
INLINE_COMMENT       : 7 9
MULTILINE_COMMENT    : 8 10
NEWLINE              : 3 5 7 8
error                : 

Nonterminals, with rules where they appear

code                 : 0
comment              : 2
line                 : 1

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . line
    (2) code -> . comment
    (3) code -> . NEWLINE
    (4) code -> . ERROR_CODE
    (5) line -> . CODE NEWLINE
    (6) line -> . CODE
    (7) comment -> . INLINE_COMMENT NEWLINE
    (8) comment -> . MULTILINE_COMMENT NEWLINE
    (9) comment -> . INLINE_COMMENT
    (10) comment -> . MULTILINE_COMMENT

    NEWLINE         shift and go to state 4
    ERROR_CODE      shift and go to state 5
    CODE            shift and go to state 6
    INLINE_COMMENT  shift and go to state 7
    MULTILINE_COMMENT shift and go to state 8

    code                           shift and go to state 1
    line                           shift and go to state 2
    comment                        shift and go to state 3

state 1

    (0) S' -> code .



state 2

    (1) code -> line .

    $end            reduce using rule 1 (code -> line .)


state 3

    (2) code -> comment .

    $end            reduce using rule 2 (code -> comment .)


state 4

    (3) code -> NEWLINE .

    $end            reduce using rule 3 (code -> NEWLINE .)


state 5

    (4) code -> ERROR_CODE .

    $end            reduce using rule 4 (code -> ERROR_CODE .)


state 6

    (5) line -> CODE . NEWLINE
    (6) line -> CODE .

    NEWLINE         shift and go to state 9
    $end            reduce using rule 6 (line -> CODE .)


state 7

    (7) comment -> INLINE_COMMENT . NEWLINE
    (9) comment -> INLINE_COMMENT .

    NEWLINE         shift and go to state 10
    $end            reduce using rule 9 (comment -> INLINE_COMMENT .)


state 8

    (8) comment -> MULTILINE_COMMENT . NEWLINE
    (10) comment -> MULTILINE_COMMENT .

    NEWLINE         shift and go to state 11
    $end            reduce using rule 10 (comment -> MULTILINE_COMMENT .)


state 9

    (5) line -> CODE NEWLINE .

    $end            reduce using rule 5 (line -> CODE NEWLINE .)


state 10

    (7) comment -> INLINE_COMMENT NEWLINE .

    $end            reduce using rule 7 (comment -> INLINE_COMMENT NEWLINE .)


state 11

    (8) comment -> MULTILINE_COMMENT NEWLINE .

    $end            reduce using rule 8 (comment -> MULTILINE_COMMENT NEWLINE .)

